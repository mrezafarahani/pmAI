{"ast":null,"code":"var _jsxFileName = \"/Users/reza/project/pmAI/frontend/src/components/TrelloJobForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TrelloJobForm = () => {\n  _s();\n  const [trelloToken, setTrelloToken] = useState('');\n  const [boardId, setBoardId] = useState('');\n  const [participants, setParticipants] = useState('');\n  const [error, setError] = useState(null);\n  const submitForm = async e => {\n    e.preventDefault();\n    const participantList = participants.split(',').map(email => email.trim());\n    try {\n      await axios.post('http://localhost:5000/start-job', {\n        trelloToken,\n        boardId,\n        participants: participantList\n      });\n      alert('Job started successfully');\n      setError(null);\n    } catch (error) {\n      setError('An error occurred while starting the job.');\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitForm,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Trello Token:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: trelloToken,\n          onChange: e => setTrelloToken(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Trello Board ID:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: boardId,\n          onChange: e => setBoardId(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Participants (comma separated emails):\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: participants,\n          onChange: e => setParticipants(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Start Job\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(TrelloJobForm, \"VurHnPgDuMEnF3YsCM96AFUq7tw=\");\n_c = TrelloJobForm;\nexport default TrelloJobForm;\nvar _c;\n$RefreshReg$(_c, \"TrelloJobForm\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","TrelloJobForm","_s","trelloToken","setTrelloToken","boardId","setBoardId","participants","setParticipants","error","setError","submitForm","e","preventDefault","participantList","split","map","email","trim","post","alert","console","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","_c","$RefreshReg$"],"sources":["/Users/reza/project/pmAI/frontend/src/components/TrelloJobForm.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\nconst TrelloJobForm = () => {\n  const [trelloToken, setTrelloToken] = useState('');\n  const [boardId, setBoardId] = useState('');\n  const [participants, setParticipants] = useState('');\n  const [error, setError] = useState(null);\n\n  const submitForm = async (e) => {\n    e.preventDefault();\n    \n    const participantList = participants.split(',').map(email => email.trim());\n    \n    try {\n      await axios.post('http://localhost:5000/start-job', {\n        trelloToken,\n        boardId,\n        participants: participantList,\n      });\n      alert('Job started successfully');\n      setError(null);\n    } catch (error) {\n      setError('An error occurred while starting the job.');\n      console.error(error);\n    }\n  };\n\n  return (\n    <div>\n      {error && <div className=\"error\">{error}</div>}\n      <form onSubmit={submitForm}>\n        <label>\n          Trello Token:\n          <input\n            type=\"text\"\n            value={trelloToken}\n            onChange={(e) => setTrelloToken(e.target.value)}\n          />\n        </label>\n        <label>\n          Trello Board ID:\n          <input\n            type=\"text\"\n            value={boardId}\n            onChange={(e) => setBoardId(e.target.value)}\n          />\n        </label>\n        <label>\n          Participants (comma separated emails):\n          <input\n            type=\"text\"\n            value={participants}\n            onChange={(e) => setParticipants(e.target.value)}\n          />\n        </label>\n        <button type=\"submit\">Start Job</button>\n      </form>\n    </div>\n  );\n};\n\nexport default TrelloJobForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}